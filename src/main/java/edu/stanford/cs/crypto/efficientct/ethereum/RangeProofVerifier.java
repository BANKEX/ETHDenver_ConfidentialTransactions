package edu.stanford.cs.crypto.efficientct.ethereum;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class RangeProofVerifier extends Contract {
    private static final String BINARY = "0x6060604052620000246002620002686401000000000262000e35176401000000009004565b60449060106200003692919062000354565b5034156200004357600080fd5b6040516108a08062002496833981016040526200006a90678000000000000000906200053d565b600060408051908101604052808660006004811015156200008757fe5b60200201518152602001866001600481101515620000a157fe5b6020020151815250604060008201518160000155602082015181600101559050506040805190810160405280866002600481101515620000dd57fe5b60200201518152602001866003600481101515620000f757fe5b602002015181525060426000820151816000015560208201518160010155905050600090505b60108160ff1610156200021c576040805190810160405280858360ff166020811015156200014757fe5b60200201518152602001858360ff166010016020811015156200016657fe5b602002015181525060008260ff166010811015156200018157fe5b6002020160008201518160000155602082015181600101559050506040805190810160405280848360ff16602081101515620001b957fe5b60200201518152602001848360ff16601001602081101515620001d857fe5b602002015181525060208260ff16601081101515620001f357fe5b60020201600082015181600001556020820151816001015590505080806001019150506200011d565b81605460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505062000686565b6200027262000399565b600060018260006010811015156200028657fe5b60200201818152505082826001601081101515620002a057fe5b602002018181525050600290505b60108160ff1610156200032057620002f783836001840360ff16601081101515620002d557fe5b6020020151620003266401000000000262000edb179091906401000000009004565b828260ff166010811015156200030957fe5b6020020181815250508080600101915050620002ae565b50919050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001828409905092915050565b826010810192821562000386579160200282015b828111156200038557825182559160200191906001019062000368565b5b509050620003959190620003c3565b5090565b610200604051908101604052806010905b6000815260200190600190039081620003aa5790505090565b620003e891905b80821115620003e4576000816000905550600101620003ca565b5090565b90565b600082601f83011260008114620004025762000407565b600080fd5b5060206200041f6200041982620005ee565b620005b6565b915081838560208402820111600181146200043a576200043f565b600080fd5b5060005b8381101562000474578162000459888262000527565b84526020840193506020830192505060018101905062000443565b5050505092915050565b600082601f8301126000811462000495576200049a565b600080fd5b506004620004b2620004ac826200061b565b620005b6565b91508183856020840282011160018114620004cd57620004d2565b600080fd5b5060005b83811015620005075781620004ec888262000527565b845260208401935060208301925050600181019050620004d6565b5050505092915050565b60006200051f825162000668565b905092915050565b60006200053582516200067c565b905092915050565b6000806000806108a0858703126001811462000559576200055e565b600080fd5b5060006200056f878288016200047e565b94505060806200058287828801620003eb565b9350506104806200059687828801620003eb565b925050610880620005aa8782880162000511565b91505092959194509250565b6000604051905081810181811067ffffffffffffffff82111760018114620005de57620005e3565b600080fd5b508060405250919050565b600067ffffffffffffffff8211600181146200060a576200060f565b600080fd5b50602082029050919050565b600067ffffffffffffffff82116001811462000637576200063c565b600080fd5b50602082029050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620006758262000648565b9050919050565b6000819050919050565b611e0080620006966000396000f30060606040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806308eb1d871461009357806326ff9c68146100c957806327cb3637146100f25780632e52d6061461011c5780633844923b146101455780635a2ee0191461017c5780636a5ff853146101a557806383ec1a49146101cf575b600080fd5b341561009e57600080fd5b6100b360046100ae903690611a46565b610206565b6040516100c09190611c24565b60405180910390f35b34156100d457600080fd5b6100dc61050e565b6040516100e99190611c3f565b60405180910390f35b34156100fd57600080fd5b610105610534565b604051610113929190611d07565b60405180910390f35b341561012757600080fd5b61012f610546565b60405161013c9190611cec565b60405180910390f35b341561015057600080fd5b6101656004610160903690611b00565b61054b565b604051610173929190611d07565b60405180910390f35b341561018757600080fd5b61018f610574565b60405161019c9190611cec565b60405180910390f35b34156101b057600080fd5b6101b8610579565b6040516101c6929190611d07565b60405180910390f35b34156101da57600080fd5b6101ef60046101ea903690611b00565b61058b565b6040516101fd929190611d07565b60405180910390f35b600061021061167c565b6102186116d3565b6102206116ed565b600060408051908101604052808c6000600a8110151561023c57fe5b602002013581526020018c6001600a8110151561025557fe5b6020020135815250925060408051908101604052808c6002600a8110151561027957fe5b602002013581526020018c6003600a8110151561029257fe5b6020020135815250846000018190525060408051908101604052808c6004600a811015156102bc57fe5b602002013581526020018c6005600a811015156102d557fe5b60200201358152508460200181905250604080519081016040528060408051908101604052808e6006600a8110151561030a57fe5b602002013581526020018e6007600a8110151561032357fe5b6020020135815250815260200160408051908101604052808e6008600a8110151561034a57fe5b602002013581526020018e6009600a8110151561036357fe5b6020020135815250815250846040018190525089600060058110151561038557fe5b60200201358460600181815250508960016005811015156103a257fe5b60200201358460800181815250508960026005811015156103bf57fe5b60200201358460a0018181525050818460c00181905250600090505b60048160ff1610156104ba5760408051908101604052808a8a8460ff16818110151561040357fe5b9050602002013581526020018a8a8460ff16600401818110151561042357fe5b9050602002013581525082600001518260ff1660048110151561044257fe5b6020020181905250604080519081016040528088888460ff16818110151561046657fe5b90506020020135815260200188888460ff16600401818110151561048657fe5b9050602002013581525082602001518260ff166004811015156104a557fe5b602002018190525080806001019150506103db565b8960036005811015156104c957fe5b60200201358260400181815250508960046005811015156104e657fe5b60200201358260600181815250506104fe83856105b4565b9450505050509695505050505050565b605460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60428060000154908060010154905082565b600481565b60208160108110151561055a57fe5b600202016000915090508060000154908060010154905082565b601081565b60408060000154908060010154905082565b60008160108110151561059a57fe5b600202016000915090508060000154908060010154905082565b60006105be611723565b6105c66117b0565b6105ce6117df565b610640866000015187602001518760000151600001518860000151602001518960200151600001518a6020015160200151604051808781526020018681526020018581526020018481526020018381526020018281526020019650505050505050604051809103902060019004610e00565b8360000181815250506106568360000151610e35565b8360200181905250610684836000015160405180828152602001915050604051809103902060019004610e00565b8360400181815250506106a883604001518460400151610edb90919063ffffffff16565b8360600181815250506106cc83604001518460600151610edb90919063ffffffff16565b8360800181815250506107206044601080602002604051908101604052809291908260108015610711576020028201915b8154815260200190600101908083116106fd575b50505050508460600151610f09565b8360a001819052506107ce8560400151600060028110151561073e57fe5b6020020151600001518660400151600060028110151561075a57fe5b6020020151602001518760400151600160028110151561077657fe5b6020020151600001518860400151600160028110151561079257fe5b60200201516020015160405180858152602001848152602001838152602001828152602001945050505050604051809103902060019004610e00565b8360c00181815250506108556108118660600151604260408051908101604052908160008201548152602001600182015481525050610f7990919063ffffffff16565b6108478760a001516040808051908101604052908160008201548152602001600182015481525050610f7990919063ffffffff16565b610ffa90919063ffffffff16565b8360e001819052506108d86108918460800151610883601060020a8760800151610edb90919063ffffffff16565b61109c90919063ffffffff16565b6108ca6108af8660600151876040015161109c90919063ffffffff16565b6108bc87602001516110dc565b610edb90919063ffffffff16565b61109c90919063ffffffff16565b836101000181815250506109656109296109038560c001518660c00151610edb90919063ffffffff16565b8760400151600160028110151561091657fe5b6020020151610f7990919063ffffffff16565b6109578560c001518860400151600060028110151561094457fe5b6020020151610f7990919063ffffffff16565b610ffa90919063ffffffff16565b83610120018190525061099c610988846060015188610f7990919063ffffffff16565b846101200151610ffa90919063ffffffff16565b8361012001819052506109f36109df8461010001516040808051908101604052908160008201548152602001600182015481525050610f7990919063ffffffff16565b846101200151610ffa90919063ffffffff16565b836101200181905250610a188360e0015184610120015161112d90919063ffffffff16565b1515610a275760009350610df7565b610a65856060015186608001518760a00151604051808481526020018381526020018281526020019350505050604051809103902060019004610e00565b83610140018181525050610aa68361014001516040808051908101604052908160008201548152602001600182015481525050610f7990919063ffffffff16565b836101600181905250610b156020601080602002604051908101604052809291906000905b82821015610b07578382600202016040805190810160405290816000820154815260200160018201548152505081526020019060010190610acb565b505050508460200151611155565b9150610b36610b2c84602001518560400151610f09565b8460a001516111e1565b9050610b69610b568460c001518760200151610f7990919063ffffffff16565b8660000151610ffa90919063ffffffff16565b836101800181905250610c08610bf4610b858560400151611266565b610be66000601080602002604051908101604052809291906000905b82821015610bdd578382600202016040805190810160405290816000820154815260200160018201548152505081526020019060010190610ba1565b50505050611292565b610f7990919063ffffffff16565b846101800151610ffa90919063ffffffff16565b836101800181905250610c32610c1e8383611300565b846101800151610ffa90919063ffffffff16565b836101800181905250610c91610c7d610c788760800151604260408051908101604052908160008201548152602001600182015481525050610f7990919063ffffffff16565b6113bb565b846101800151610ffa90919063ffffffff16565b836101800181905250610ccd610cb98660a00151856101600151610f7990919063ffffffff16565b846101800151610ffa90919063ffffffff16565b836101800181905250605460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdcfb4a6846101800151610d2b8860c0015160000151611456565b610d3c8960c00151600001516114b7565b610d4d8a60c0015160200151611456565b610d5e8b60c00151602001516114b7565b8b60c00151604001518c60c00151606001518a8c61016001516000604051602001526040518a63ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610dc099989796959493929190611c5a565b602060405180830381600087803b1515610dd957600080fd5b6102c65a03f11515610dea57600080fd5b5050506040518051905093505b50505092915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182811515610e2d57fe5b069050919050565b610e3d6117df565b60006001826000601081101515610e5057fe5b60200201818152505082826001601081101515610e6957fe5b602002018181525050600290505b60108160ff161015610ed557610eae83836001840360ff16601081101515610e9b57fe5b6020020151610edb90919063ffffffff16565b828260ff16601081101515610ebf57fe5b6020020181815250508080600101915050610e77565b50919050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001828409905092915050565b610f116117df565b60008090505b60108160ff161015610f7257610f4b83858360ff16601081101515610f3857fe5b6020020151610edb90919063ffffffff16565b828260ff16601081101515610f5c57fe5b6020020181815250508080600101915050610f17565b5092915050565b610f816116d3565b610f89611808565b8360000151816000600381101515610f9d57fe5b6020020181815250508360200151816001600381101515610fba57fe5b60200201818152505082816002600381101515610fd357fe5b6020020181815250506040826060836007600019fa1515610ff357600080fd5b5092915050565b6110026116d3565b61100a611830565b836000015181600060048110151561101e57fe5b602002018181525050836020015181600160048110151561103b57fe5b602002018181525050826000015181600260048110151561105857fe5b602002018181525050826020015181600360048110151561107557fe5b6020020181815250506040826080836006600019fa151561109557600080fd5b5092915050565b6000818310156110d05782827f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103016110d4565b8183035b905092915050565b600080600090505b60108160ff16101561112757611118838260ff1660108110151561110457fe5b60200201518361151890919063ffffffff16565b915080806001019150506110e4565b50919050565b60008160000151836000015114801561114d575081602001518360200151145b905092915050565b61115d6117b0565b60008090505b60108160ff1610156111da576111b4611190848360ff1660108110151561118657fe5b6020020151611546565b858360ff166010811015156111a157fe5b6020020151610f7990919063ffffffff16565b828260ff166010811015156111c557fe5b60200201819052508080600101915050611163565b5092915050565b6111e96117df565b60008090505b60108160ff16101561125f57611238838260ff1660108110151561120f57fe5b6020020151858360ff1660108110151561122557fe5b602002015161151890919063ffffffff16565b828260ff1660108110151561124957fe5b60200201818152505080806001019150506111ef565b5092915050565b6000817f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001039050919050565b61129a6116d3565b60008260006010811015156112ab57fe5b60200201519150600190505b60108160ff1610156112fa576112eb838260ff166010811015156112d757fe5b602002015183610ffa90919063ffffffff16565b915080806001019150506112b7565b50919050565b6113086116d3565b600061134383600060108110151561131c57fe5b602002015185600060108110151561133057fe5b6020020151610f7990919063ffffffff16565b9150600190505b60108160ff1610156113b4576113a5611396848360ff1660108110151561136d57fe5b6020020151868460ff1660108110151561138357fe5b6020020151610f7990919063ffffffff16565b83610ffa90919063ffffffff16565b9150808060010191505061134a565b5092915050565b6113c36116d3565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015611400575060008360200151145b156114235760408051908101604052806000815260200160008152509150611450565b60408051908101604052808460000151815260200182856020015181151561144757fe5b06830381525091505b50919050565b61145e611830565b60008090505b60048160ff1610156114b157828160ff1660048110151561148157fe5b602002015160000151828260ff1660048110151561149b57fe5b6020020181815250508080600101915050611464565b50919050565b6114bf611830565b60008090505b60048160ff16101561151257828160ff166004811015156114e257fe5b602002015160200151828260ff166004811015156114fc57fe5b60200201818152505080806001019150506114c5565b50919050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001828408905092915050565b60006115758260027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010361157c565b9050919050565b6000611586611858565b61158e611880565b602082600060068110151561159f57fe5b60200201818152505060208260016006811015156115b957fe5b60200201818152505060208260026006811015156115d357fe5b602002018181525050848260036006811015156115ec57fe5b6020020181815250508382600460068110151561160557fe5b6020020181815250507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182600560068110151561163e57fe5b60200201818152505060208160c0846005600019fa151561165e57600080fd5b80600060018110151561166d57fe5b60200201519250505092915050565b6103a0604051908101604052806116916118a8565b815260200161169e6118a8565b81526020016116ab6118c2565b81526020016000815260200160008152602001600081526020016116cd6118f0565b81525090565b604080519081016040528060008152602001600081525090565b61024060405190810160405280611702611926565b815260200161170f611926565b815260200160008152602001600081525090565b6105e0604051908101604052806000815260200161173f611955565b8152602001600081526020016000815260200160008152602001611761611955565b8152602001600081526020016117756118a8565b8152602001600081526020016117896118a8565b81526020016000815260200161179d6118a8565b81526020016117aa6118a8565b81525090565b610400604051908101604052806010905b6117c96118a8565b8152602001906001900390816117c15790505090565b610200604051908101604052806010905b60008152602001906001900390816117f05790505090565b6060604051908101604052806003905b60008152602001906001900390816118185790505090565b6080604051908101604052806004905b60008152602001906001900390816118405790505090565b60c0604051908101604052806006905b60008152602001906001900390816118685790505090565b6020604051908101604052806001905b60008152602001906001900390816118905790505090565b604080519081016040528060008152602001600081525090565b6080604051908101604052806002905b6118da6118a8565b8152602001906001900390816118d25790505090565b61024060405190810160405280611905611926565b8152602001611912611926565b815260200160008152602001600081525090565b610100604051908101604052806004905b61193f6118a8565b8152602001906001900390816119375790505090565b610200604051908101604052806010905b60008152602001906001900390816119665790505090565b6000819050826020600a02820111600181146119995761199e565b600080fd5b5092915050565b6000819050826020600502820111600181146119c0576119c5565b600080fd5b5092915050565b60008083601f840112600081146119e2576119e7565b600080fd5b508235905067ffffffffffffffff811160018114611a0457611a09565b600080fd5b50602083019150836020820283011160018114611a2557611a2a565b600080fd5b509250929050565b6000611a3e8235611daa565b905092915050565b6000806000806000806102208789031260018114611a6357611a68565b600080fd5b506000611a7789828a0161197e565b965050610140611a8989828a016119a5565b9550506101e087013567ffffffffffffffff811160018114611aaa57611aaf565b600080fd5b50611abc89828a016119cc565b945094505061020087013567ffffffffffffffff811160018114611adf57611ae4565b600080fd5b50611af189828a016119cc565b92509250509295509295509295565b600060208284031260018114611b1557611b1a565b600080fd5b506000611b2984828501611a32565b91505092915050565b611b3b81611d44565b611b4482611d30565b60005b82811015611b7657611b5a858351611be6565b611b6382611d5a565b9150604085019450600181019050611b47565b5050505050565b611b8681611d4f565b611b8f82611d3a565b60005b82811015611bc157611ba5858351611c15565b611bae82611d67565b9150602085019450600181019050611b92565b5050505050565b611bd181611d94565b82525050565b611be081611db4565b82525050565b604082016000820151611bfc6000850182611c15565b506020820151611c0f6020850182611c15565b50505050565b611c1e81611da0565b82525050565b6000602082019050611c396000830184611bc8565b92915050565b6000602082019050611c546000830184611bd7565b92915050565b60006106c082019050611c70600083018c611be6565b611c7d604083018b611b7d565b611c8a60c083018a611b7d565b611c98610140830189611b7d565b611ca66101c0830188611b7d565b611cb4610240830187611c15565b611cc2610260830186611c15565b611cd0610280830185611b32565b611cde610680830184611be6565b9a9950505050505050505050565b6000602082019050611d016000830184611c15565b92915050565b6000604082019050611d1c6000830185611c15565b611d296020830184611c15565b9392505050565b6000819050919050565b6000819050919050565b600060109050919050565b600060049050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000611dbf82611d74565b90509190505600a265627a7a7230582041a39353c38edb20370368c734625ea480d20724ed277eb19d308a6ae15031d36c6578706572696d656e74616cf50037";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
    }

    protected RangeProofVerifier(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected RangeProofVerifier(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<ProofEventResponse> getProofEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Proof", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ProofEventResponse> responses = new ArrayList<ProofEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ProofEventResponse typedResponse = new ProofEventResponse();
            typedResponse.x = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.y = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ProofEventResponse> proofEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Proof", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ProofEventResponse>() {
            @Override
            public ProofEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ProofEventResponse typedResponse = new ProofEventResponse();
                typedResponse.x = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.y = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<String> ipVerifier() {
        Function function = new Function("ipVerifier", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> peddersenBaseH() {
        final Function function = new Function("peddersenBaseH", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> n() {
        Function function = new Function("n", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> hs(BigInteger param0) {
        final Function function = new Function("hs", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> m() {
        Function function = new Function("m", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> peddersenBaseG() {
        final Function function = new Function("peddersenBaseG", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> gs(BigInteger param0) {
        final Function function = new Function("gs", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public static RemoteCall<RangeProofVerifier> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, List<BigInteger> coords, List<BigInteger> gs_coords, List<BigInteger> hs_coords, String _ipVerifier) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(coords, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray32<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(gs_coords, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray32<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(hs_coords, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.Address(_ipVerifier)));
        return deployRemoteCall(RangeProofVerifier.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<RangeProofVerifier> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, List<BigInteger> coords, List<BigInteger> gs_coords, List<BigInteger> hs_coords, String _ipVerifier) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(coords, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray32<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(gs_coords, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray32<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(hs_coords, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.Address(_ipVerifier)));
        return deployRemoteCall(RangeProofVerifier.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<Boolean> verify(List<BigInteger> coords, List<BigInteger> scalars, List<BigInteger> ls_coords, List<BigInteger> rs_coords) {
        Function function = new Function("verify", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.StaticArray10<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(coords, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray5<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(scalars, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(ls_coords, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(rs_coords, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public static RangeProofVerifier load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new RangeProofVerifier(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static RangeProofVerifier load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new RangeProofVerifier(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ProofEventResponse {
        public BigInteger x;

        public BigInteger y;
    }
}
